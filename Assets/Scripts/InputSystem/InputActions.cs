//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Map1"",
            ""id"": ""d9d219d1-997f-4396-b96d-9d122a4f28f6"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""1d90db6a-1b34-4b82-9056-27329424cf31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""572093b4-0501-47f7-a358-1253a9187dab"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map2"",
            ""id"": ""00e41c36-891c-4af3-b393-2a2b5403d482"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""4aa66667-fa50-458a-876f-80aeaf729e26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f06fe71-9cff-48e4-a050-39f864fcfe38"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map1
        m_Map1 = asset.FindActionMap("Map1", throwIfNotFound: true);
        m_Map1_A = m_Map1.FindAction("A", throwIfNotFound: true);
        // Map2
        m_Map2 = asset.FindActionMap("Map2", throwIfNotFound: true);
        m_Map2_A = m_Map2.FindAction("A", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map1
    private readonly InputActionMap m_Map1;
    private IMap1Actions m_Map1ActionsCallbackInterface;
    private readonly InputAction m_Map1_A;
    public struct Map1Actions
    {
        private @InputActions m_Wrapper;
        public Map1Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_Map1_A;
        public InputActionMap Get() { return m_Wrapper.m_Map1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Map1Actions set) { return set.Get(); }
        public void SetCallbacks(IMap1Actions instance)
        {
            if (m_Wrapper.m_Map1ActionsCallbackInterface != null)
            {
                @A.started -= m_Wrapper.m_Map1ActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_Map1ActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_Map1ActionsCallbackInterface.OnA;
            }
            m_Wrapper.m_Map1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
            }
        }
    }
    public Map1Actions @Map1 => new Map1Actions(this);

    // Map2
    private readonly InputActionMap m_Map2;
    private IMap2Actions m_Map2ActionsCallbackInterface;
    private readonly InputAction m_Map2_A;
    public struct Map2Actions
    {
        private @InputActions m_Wrapper;
        public Map2Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_Map2_A;
        public InputActionMap Get() { return m_Wrapper.m_Map2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Map2Actions set) { return set.Get(); }
        public void SetCallbacks(IMap2Actions instance)
        {
            if (m_Wrapper.m_Map2ActionsCallbackInterface != null)
            {
                @A.started -= m_Wrapper.m_Map2ActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_Map2ActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_Map2ActionsCallbackInterface.OnA;
            }
            m_Wrapper.m_Map2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
            }
        }
    }
    public Map2Actions @Map2 => new Map2Actions(this);
    public interface IMap1Actions
    {
        void OnA(InputAction.CallbackContext context);
    }
    public interface IMap2Actions
    {
        void OnA(InputAction.CallbackContext context);
    }
}
